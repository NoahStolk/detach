<#@ template language="C#" #>
<#@ output extension=".g.cs" #>
<#@ include file="..\TemplateUtils.ttinclude" #>
<#@ import namespace="System.Linq" #>
<# string[] typeNames =
[
	"sbyte",
	"byte",
	"short",
	"ushort",
	"int",
	"uint",
	"long",
	"ulong",
];
string[] components = ["X", "Y", "Z", "W"];
#>
<#= WriteHeader() #>

using Detach.Numerics;

namespace Detach.Extensions;

public static partial class BinaryWriterExtensions
{
<# for (int i = 2; i <= 4; i++) { #>
<# foreach (string builtInTypeName in typeNames) { #>
	public static void Write(this BinaryWriter binaryWriter, IntVector<#= i #><<#= builtInTypeName #>> value)
	{
		<#= string.Join("\n\t\t", Enumerable.Range(0, i).Select(j => $"binaryWriter.Write(value.{components[j]});") ) #>
	}

<#} #>
<#} #>
}
