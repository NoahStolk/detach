// <auto-generated>
// This code was auto-generated by the Tools.Generator Detach project.
// Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>

#nullable enable

using Detach.Buffers;
using Detach.Numerics;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Detach.Extensions;

public static partial class BinaryReaderExtensions
{
	public static Buffer4<sbyte> ReadBuffer4OfInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<sbyte>.Size * sizeof(sbyte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<sbyte>(MemoryMarshal.Cast<byte, sbyte>(buffer));
	}

	public static Buffer4<byte> ReadBuffer4OfUInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<byte>.Size * sizeof(byte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<byte>(MemoryMarshal.Cast<byte, byte>(buffer));
	}

	public static Buffer4<short> ReadBuffer4OfInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<short>.Size * sizeof(short)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<short>(MemoryMarshal.Cast<byte, short>(buffer));
	}

	public static Buffer4<ushort> ReadBuffer4OfUInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<ushort>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<ushort>(MemoryMarshal.Cast<byte, ushort>(buffer));
	}

	public static Buffer4<int> ReadBuffer4OfInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<int>.Size * sizeof(int)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<int>(MemoryMarshal.Cast<byte, int>(buffer));
	}

	public static Buffer4<uint> ReadBuffer4OfUInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<uint>.Size * sizeof(uint)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<uint>(MemoryMarshal.Cast<byte, uint>(buffer));
	}

	public static Buffer4<long> ReadBuffer4OfInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<long>.Size * sizeof(long)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<long>(MemoryMarshal.Cast<byte, long>(buffer));
	}

	public static Buffer4<ulong> ReadBuffer4OfUInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<ulong>.Size * sizeof(ulong)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<ulong>(MemoryMarshal.Cast<byte, ulong>(buffer));
	}

	public static Buffer4<Half> ReadBuffer4OfFloat16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<Half>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<Half>(MemoryMarshal.Cast<byte, Half>(buffer));
	}

	public static Buffer4<float> ReadBuffer4OfFloat32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<float>.Size * sizeof(float)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<float>(MemoryMarshal.Cast<byte, float>(buffer));
	}

	public static Buffer4<double> ReadBuffer4OfFloat64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer4<double>.Size * sizeof(double)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer4<double>(MemoryMarshal.Cast<byte, double>(buffer));
	}

	public static Buffer6<sbyte> ReadBuffer6OfInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<sbyte>.Size * sizeof(sbyte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<sbyte>(MemoryMarshal.Cast<byte, sbyte>(buffer));
	}

	public static Buffer6<byte> ReadBuffer6OfUInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<byte>.Size * sizeof(byte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<byte>(MemoryMarshal.Cast<byte, byte>(buffer));
	}

	public static Buffer6<short> ReadBuffer6OfInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<short>.Size * sizeof(short)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<short>(MemoryMarshal.Cast<byte, short>(buffer));
	}

	public static Buffer6<ushort> ReadBuffer6OfUInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<ushort>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<ushort>(MemoryMarshal.Cast<byte, ushort>(buffer));
	}

	public static Buffer6<int> ReadBuffer6OfInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<int>.Size * sizeof(int)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<int>(MemoryMarshal.Cast<byte, int>(buffer));
	}

	public static Buffer6<uint> ReadBuffer6OfUInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<uint>.Size * sizeof(uint)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<uint>(MemoryMarshal.Cast<byte, uint>(buffer));
	}

	public static Buffer6<long> ReadBuffer6OfInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<long>.Size * sizeof(long)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<long>(MemoryMarshal.Cast<byte, long>(buffer));
	}

	public static Buffer6<ulong> ReadBuffer6OfUInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<ulong>.Size * sizeof(ulong)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<ulong>(MemoryMarshal.Cast<byte, ulong>(buffer));
	}

	public static Buffer6<Half> ReadBuffer6OfFloat16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<Half>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<Half>(MemoryMarshal.Cast<byte, Half>(buffer));
	}

	public static Buffer6<float> ReadBuffer6OfFloat32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<float>.Size * sizeof(float)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<float>(MemoryMarshal.Cast<byte, float>(buffer));
	}

	public static Buffer6<double> ReadBuffer6OfFloat64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer6<double>.Size * sizeof(double)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer6<double>(MemoryMarshal.Cast<byte, double>(buffer));
	}

	public static Buffer8<sbyte> ReadBuffer8OfInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<sbyte>.Size * sizeof(sbyte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<sbyte>(MemoryMarshal.Cast<byte, sbyte>(buffer));
	}

	public static Buffer8<byte> ReadBuffer8OfUInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<byte>.Size * sizeof(byte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<byte>(MemoryMarshal.Cast<byte, byte>(buffer));
	}

	public static Buffer8<short> ReadBuffer8OfInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<short>.Size * sizeof(short)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<short>(MemoryMarshal.Cast<byte, short>(buffer));
	}

	public static Buffer8<ushort> ReadBuffer8OfUInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<ushort>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<ushort>(MemoryMarshal.Cast<byte, ushort>(buffer));
	}

	public static Buffer8<int> ReadBuffer8OfInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<int>.Size * sizeof(int)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<int>(MemoryMarshal.Cast<byte, int>(buffer));
	}

	public static Buffer8<uint> ReadBuffer8OfUInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<uint>.Size * sizeof(uint)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<uint>(MemoryMarshal.Cast<byte, uint>(buffer));
	}

	public static Buffer8<long> ReadBuffer8OfInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<long>.Size * sizeof(long)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<long>(MemoryMarshal.Cast<byte, long>(buffer));
	}

	public static Buffer8<ulong> ReadBuffer8OfUInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<ulong>.Size * sizeof(ulong)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<ulong>(MemoryMarshal.Cast<byte, ulong>(buffer));
	}

	public static Buffer8<Half> ReadBuffer8OfFloat16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<Half>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<Half>(MemoryMarshal.Cast<byte, Half>(buffer));
	}

	public static Buffer8<float> ReadBuffer8OfFloat32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<float>.Size * sizeof(float)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<float>(MemoryMarshal.Cast<byte, float>(buffer));
	}

	public static Buffer8<double> ReadBuffer8OfFloat64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer8<double>.Size * sizeof(double)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer8<double>(MemoryMarshal.Cast<byte, double>(buffer));
	}

	public static Buffer12<sbyte> ReadBuffer12OfInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<sbyte>.Size * sizeof(sbyte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<sbyte>(MemoryMarshal.Cast<byte, sbyte>(buffer));
	}

	public static Buffer12<byte> ReadBuffer12OfUInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<byte>.Size * sizeof(byte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<byte>(MemoryMarshal.Cast<byte, byte>(buffer));
	}

	public static Buffer12<short> ReadBuffer12OfInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<short>.Size * sizeof(short)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<short>(MemoryMarshal.Cast<byte, short>(buffer));
	}

	public static Buffer12<ushort> ReadBuffer12OfUInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<ushort>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<ushort>(MemoryMarshal.Cast<byte, ushort>(buffer));
	}

	public static Buffer12<int> ReadBuffer12OfInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<int>.Size * sizeof(int)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<int>(MemoryMarshal.Cast<byte, int>(buffer));
	}

	public static Buffer12<uint> ReadBuffer12OfUInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<uint>.Size * sizeof(uint)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<uint>(MemoryMarshal.Cast<byte, uint>(buffer));
	}

	public static Buffer12<long> ReadBuffer12OfInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<long>.Size * sizeof(long)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<long>(MemoryMarshal.Cast<byte, long>(buffer));
	}

	public static Buffer12<ulong> ReadBuffer12OfUInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<ulong>.Size * sizeof(ulong)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<ulong>(MemoryMarshal.Cast<byte, ulong>(buffer));
	}

	public static Buffer12<Half> ReadBuffer12OfFloat16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<Half>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<Half>(MemoryMarshal.Cast<byte, Half>(buffer));
	}

	public static Buffer12<float> ReadBuffer12OfFloat32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<float>.Size * sizeof(float)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<float>(MemoryMarshal.Cast<byte, float>(buffer));
	}

	public static Buffer12<double> ReadBuffer12OfFloat64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer12<double>.Size * sizeof(double)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer12<double>(MemoryMarshal.Cast<byte, double>(buffer));
	}

	public static Buffer16<sbyte> ReadBuffer16OfInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<sbyte>.Size * sizeof(sbyte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<sbyte>(MemoryMarshal.Cast<byte, sbyte>(buffer));
	}

	public static Buffer16<byte> ReadBuffer16OfUInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<byte>.Size * sizeof(byte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<byte>(MemoryMarshal.Cast<byte, byte>(buffer));
	}

	public static Buffer16<short> ReadBuffer16OfInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<short>.Size * sizeof(short)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<short>(MemoryMarshal.Cast<byte, short>(buffer));
	}

	public static Buffer16<ushort> ReadBuffer16OfUInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<ushort>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<ushort>(MemoryMarshal.Cast<byte, ushort>(buffer));
	}

	public static Buffer16<int> ReadBuffer16OfInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<int>.Size * sizeof(int)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<int>(MemoryMarshal.Cast<byte, int>(buffer));
	}

	public static Buffer16<uint> ReadBuffer16OfUInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<uint>.Size * sizeof(uint)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<uint>(MemoryMarshal.Cast<byte, uint>(buffer));
	}

	public static Buffer16<long> ReadBuffer16OfInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<long>.Size * sizeof(long)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<long>(MemoryMarshal.Cast<byte, long>(buffer));
	}

	public static Buffer16<ulong> ReadBuffer16OfUInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<ulong>.Size * sizeof(ulong)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<ulong>(MemoryMarshal.Cast<byte, ulong>(buffer));
	}

	public static Buffer16<Half> ReadBuffer16OfFloat16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<Half>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<Half>(MemoryMarshal.Cast<byte, Half>(buffer));
	}

	public static Buffer16<float> ReadBuffer16OfFloat32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<float>.Size * sizeof(float)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<float>(MemoryMarshal.Cast<byte, float>(buffer));
	}

	public static Buffer16<double> ReadBuffer16OfFloat64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer16<double>.Size * sizeof(double)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer16<double>(MemoryMarshal.Cast<byte, double>(buffer));
	}

	public static Buffer24<sbyte> ReadBuffer24OfInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<sbyte>.Size * sizeof(sbyte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<sbyte>(MemoryMarshal.Cast<byte, sbyte>(buffer));
	}

	public static Buffer24<byte> ReadBuffer24OfUInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<byte>.Size * sizeof(byte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<byte>(MemoryMarshal.Cast<byte, byte>(buffer));
	}

	public static Buffer24<short> ReadBuffer24OfInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<short>.Size * sizeof(short)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<short>(MemoryMarshal.Cast<byte, short>(buffer));
	}

	public static Buffer24<ushort> ReadBuffer24OfUInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<ushort>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<ushort>(MemoryMarshal.Cast<byte, ushort>(buffer));
	}

	public static Buffer24<int> ReadBuffer24OfInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<int>.Size * sizeof(int)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<int>(MemoryMarshal.Cast<byte, int>(buffer));
	}

	public static Buffer24<uint> ReadBuffer24OfUInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<uint>.Size * sizeof(uint)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<uint>(MemoryMarshal.Cast<byte, uint>(buffer));
	}

	public static Buffer24<long> ReadBuffer24OfInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<long>.Size * sizeof(long)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<long>(MemoryMarshal.Cast<byte, long>(buffer));
	}

	public static Buffer24<ulong> ReadBuffer24OfUInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<ulong>.Size * sizeof(ulong)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<ulong>(MemoryMarshal.Cast<byte, ulong>(buffer));
	}

	public static Buffer24<Half> ReadBuffer24OfFloat16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<Half>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<Half>(MemoryMarshal.Cast<byte, Half>(buffer));
	}

	public static Buffer24<float> ReadBuffer24OfFloat32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<float>.Size * sizeof(float)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<float>(MemoryMarshal.Cast<byte, float>(buffer));
	}

	public static Buffer24<double> ReadBuffer24OfFloat64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer24<double>.Size * sizeof(double)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer24<double>(MemoryMarshal.Cast<byte, double>(buffer));
	}

	public static Buffer32<sbyte> ReadBuffer32OfInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<sbyte>.Size * sizeof(sbyte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<sbyte>(MemoryMarshal.Cast<byte, sbyte>(buffer));
	}

	public static Buffer32<byte> ReadBuffer32OfUInt8(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<byte>.Size * sizeof(byte)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<byte>(MemoryMarshal.Cast<byte, byte>(buffer));
	}

	public static Buffer32<short> ReadBuffer32OfInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<short>.Size * sizeof(short)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<short>(MemoryMarshal.Cast<byte, short>(buffer));
	}

	public static Buffer32<ushort> ReadBuffer32OfUInt16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<ushort>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<ushort>(MemoryMarshal.Cast<byte, ushort>(buffer));
	}

	public static Buffer32<int> ReadBuffer32OfInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<int>.Size * sizeof(int)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<int>(MemoryMarshal.Cast<byte, int>(buffer));
	}

	public static Buffer32<uint> ReadBuffer32OfUInt32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<uint>.Size * sizeof(uint)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<uint>(MemoryMarshal.Cast<byte, uint>(buffer));
	}

	public static Buffer32<long> ReadBuffer32OfInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<long>.Size * sizeof(long)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<long>(MemoryMarshal.Cast<byte, long>(buffer));
	}

	public static Buffer32<ulong> ReadBuffer32OfUInt64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<ulong>.Size * sizeof(ulong)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<ulong>(MemoryMarshal.Cast<byte, ulong>(buffer));
	}

	public static Buffer32<Half> ReadBuffer32OfFloat16(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<Half>.Size * sizeof(ushort)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<Half>(MemoryMarshal.Cast<byte, Half>(buffer));
	}

	public static Buffer32<float> ReadBuffer32OfFloat32(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<float>.Size * sizeof(float)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<float>(MemoryMarshal.Cast<byte, float>(buffer));
	}

	public static Buffer32<double> ReadBuffer32OfFloat64(this BinaryReader binaryReader)
	{
		Span<byte> buffer = stackalloc byte[Buffer32<double>.Size * sizeof(double)];
		Debug.Assert(binaryReader.Read(buffer) == buffer.Length);
		return new Buffer32<double>(MemoryMarshal.Cast<byte, double>(buffer));
	}

}
