<#@ template language="C#" #>
<#@ output extension=".g.cs" #>
<#@ include file="..\TemplateUtils.ttinclude" #>
<# int[] bufferSizes = [ 4, 6, 8, 12, 16, 24, 32 ]; #>
<#= WriteHeader() #>

using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;

namespace Detach.Buffers;

<# foreach (int bufferSize in bufferSizes) { #>
[InlineArray(Size)]
[DebuggerDisplay("Items = {Items}")]
[SuppressMessage("StyleCop.CSharp.NamingRules", "SA1306:Field names should begin with lower-case letter", Justification = "InlineArray")]
[SuppressMessage("Roslynator", "RCS1213:Remove unused member declaration", Justification = "InlineArray")]
public struct Buffer<#= bufferSize #><T> : IEquatable<Buffer<#= bufferSize #><T>>
	where T : struct
{
	public const int Size = <#= bufferSize #>;

	[DebuggerBrowsable(DebuggerBrowsableState.Never)]
	private T _0;

	public Buffer<#= bufferSize #>(params ReadOnlySpan<T> values)
	{
		for (int i = 0; i < Math.Min(values.Length, Size); i++)
			this[i] = values[i];
	}

	[DebuggerBrowsable(DebuggerBrowsableState.RootHidden)]
	internal T[] Items => this[..Size].ToArray();

	public static bool operator ==(Buffer<#= bufferSize #><T> left, Buffer<#= bufferSize #><T> right)
	{
		return left.Equals(right);
	}

	public static bool operator !=(Buffer<#= bufferSize #><T> left, Buffer<#= bufferSize #><T> right)
	{
		return !left.Equals(right);
	}

	public bool Equals(Buffer<#= bufferSize #><T> other)
	{
		for (int i = 0; i < Size; i++)
		{
			if (!this[i].Equals(other[i]))
				return false;
		}

		return true;
	}

	public override bool Equals(object? obj)
	{
		return obj is Buffer<#= bufferSize #><T> other && Equals(other);
	}

	public override int GetHashCode()
	{
		HashCode hash = default;
		for (int i = 0; i < Size; i++)
			hash.Add(this[i]);
		return hash.ToHashCode();
	}
}

<#} #>
