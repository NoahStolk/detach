<#@ template language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.Linq" #>
<# (string BuiltInTypeName, string MethodName, string ReaderMethodName)[] typeNames =
[
	("sbyte", "Int8", "ReadSByte"),
	("byte", "UInt8", "ReadByte"),
	("short", "Int16", "ReadInt16"),
	("ushort", "UInt16", "ReadUInt16"),
	("int", "Int32", "ReadInt32"),
	("uint", "UInt32", "ReadUInt32"),
	("long", "Int64", "ReadInt64"),
	("ulong", "UInt64", "ReadUInt64"),
];
#>
using Detach.Numerics;

namespace Detach.Extensions;

public static partial class BinaryReaderExtensions
{
<# for (int i = 2; i <= 4; i++) { #>
<# foreach ((string builtInTypeName, string methodName, string readerMethodName) in typeNames) { #>
	public static IntVector<#= i #><<#= builtInTypeName #>> ReadIntVector<#= i #>Of<#= methodName #>(this BinaryReader binaryReader)
	{
		return new IntVector<#= i #><<#= builtInTypeName #>>(<#= string.Join(", ", Enumerable.Range(0, i).Select(_ => $"binaryReader.{readerMethodName}()")) #>);
	}

<#} #>
<#} #>
}
