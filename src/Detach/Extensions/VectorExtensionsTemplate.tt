<#@ template language="C#" #>
<#@ output extension=".cs" #>
<# (string BuiltInTypeName, string MethodName)[] typeNames =
[
	("sbyte", "Int8"),
	("byte", "UInt8"),
	("short", "Int16"),
	("ushort", "UInt16"),
	("int", "Int32"),
	("uint", "UInt32"),
	("long", "Int64"),
	("ulong", "UInt64"),
];
string[] operations = ["Round", "Floor", "Ceiling"];

string GenerateArgumentList(int count, string prepend, string append)
{
	string[] components = ["X", "Y", "Z", "W"];
	string[] arguments = new string[count];
	for (int i = 0; i < count; i++)
		arguments[i] = $"{prepend}{components[i]}{append}";

	return string.Join(", ", arguments);
}

#>
using Detach.Numerics;
using System.Numerics;

namespace Detach.Extensions;

public static partial class VectorExtensions
{
<# for (int i = 2; i <= 4; i++) { #>
<# foreach (string operation in operations) { #>
<# foreach ((string builtInTypeName, string methodName) in typeNames) { #>
	public static IntVector<#= i #><<#= builtInTypeName #>> <#= operation #>ToIntVector<#= i #>Of<#= methodName #>(this Vector<#= i #> vector)
	{
		return new IntVector<#= i #><<#= builtInTypeName #>>(<#= GenerateArgumentList(i, $"({builtInTypeName})MathF.{operation}(vector.", ")") #>);
	}

<#} #>
<#} #>
<#} #>
<# for (int i = 2; i <= 4; i++) { #>
<# foreach ((string builtInTypeName, _) in typeNames) { #>
	public static Vector<#= i #> ToVector<#= i #>(this IntVector<#= i #><<#= builtInTypeName #>> vector)
	{
		return new Vector<#= i #>(<#= GenerateArgumentList(i, "vector.", string.Empty) #>);
	}

<#} #>
<#} #>
}
